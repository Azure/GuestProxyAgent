name: Reusable Build and Artifacts

on:
  workflow_call:
    inputs:
      generate_release:
        required: true
        type: boolean
env:
  CARGO_TERM_COLOR: always
  CARGO_LLVM_COV_TARGET_DIR: out

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Create GitHub Release
        id: create_release
        if: inputs.generate_release == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Release notes

  build-windows:
    runs-on: windows-latest
    needs: create-release

    steps:
      - name: Checkout Project
        uses: actions/checkout@v3.3.0

      - name: Install Clang
        working-directory: ${{env.GITHUB_WORKSPACE}}
        run: |
          choco install -y llvm --version 11.0.1 --allow-downgrade

      - name: setup-msbuild
        uses: microsoft/setup-msbuild@v1.3.1

      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: 1.69.0

      - name: Code Coverage
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Run Build.cmd Debug
        run: .\build.cmd

      - name: Upload debug build zip package
        if: (success() || failure())
        uses: actions/upload-artifact@v3.1.2
        with:
          # Artifact name
          name: build-debug-windows-amd64.zip
          # A file, directory or wildcard pattern that describes what to upload
          path: out/debug/package/

      - name: Run Build.cmd Release
        if: (success() || failure())
        run: .\build.cmd release

      - name: Upload release build zip package
        if: (success() || failure())
        uses: actions/upload-artifact@v3.1.2
        with:
          # Artifact name
          name: build-release-windows-amd64.zip
          # A file, directory or wildcard pattern that describes what to upload
          path: out/release/package/

      - name: Run Code Coverage for proxy_agent_shared
        run: |
          cargo llvm-cov --manifest-path ./proxy_agent_shared/Cargo.toml --output-path ./out/proxy_agent_shared_codeCov.txt --release
          type ./out/proxy_agent_shared_codeCov.txt

      - name: Parse Code Coverage for proxy_agent_shared
        run: |
          $threshold = 70
          Get-Content out\proxy_agent_shared_codeCov.txt | ForEach-Object {
            if ($_ -match 'TOTAL') {
              $totalLine = $_
            }
          }
          $coverageData = $totalLine -split '\s+'
          $totalLinesPercent = $coverageData[9] -replace '%', ''

          if ($totalLinesPercent -lt $threshold) {
            Write-Output "Code coverage below threshold: $totalLinesPercent. Failing the step."
            exit 1
          } else {
            Write-Output "Percent of Lines Covered: $totalLinesPercent"
          }

      - name: Run Code Coverage for proxy_agent
        run: |
          cargo llvm-cov --manifest-path proxy_agent\Cargo.toml --output-path out\codeCov.txt --release --ignore-filename-regex "(proxy_agent_shared|main.rs|bpf_api.rs|bpf_obj.rs)" -- --test-threads=1
          type out\codeCov.txt

      - name: Parse Code Coverage for proxy_agent
        run: |
          $threshold = 70
          Get-Content out\codeCov.txt | ForEach-Object {
            if ($_ -match 'TOTAL') {
              $totalLine = $_
            }
          }
          $coverageData = $totalLine -split '\s+'
          $totalLinesPercent = $coverageData[9] -replace '%', ''

          if ($totalLinesPercent -lt $threshold) {
            Write-Output "Code coverage below threshold: $totalLinesPercent. Failing the step."
            exit 1
          } else {
            Write-Output "Percent of Lines Covered: $totalLinesPercent"
          }

      - name: Run Code Coverage for proxy_agent_extension
        run: |
          cargo llvm-cov --manifest-path proxy_agent_extension\Cargo.toml --output-path out\proxy_agent_extension_codeCov.txt --release --ignore-filename-regex "(proxy_agent_shared|main.rs)" -- --test-threads=1
          type out\proxy_agent_extension_codeCov.txt

      - name: Parse Code Coverage for proxy_agent_extension
        run: |
          $threshold = 70
          Get-Content out\proxy_agent_extension_codeCov.txt | ForEach-Object {
            if ($_ -match 'TOTAL') {
              $totalLine = $_
            }
          }
          $coverageData = $totalLine -split '\s+'
          $totalLinesPercent = $coverageData[9] -replace '%', ''

          if ($totalLinesPercent -lt $threshold) {
            Write-Output "Code coverage below threshold: $totalLinesPercent. Failing the step."
            exit 1
          } else {
            Write-Output "Percent of Lines Covered: $totalLinesPercent"
          }

      - name: get current release
        id: get_current_release
        if: inputs.generate_release == true
        uses: joutvhu/get-release@v1.0.2
        with:
          # do not push two tags/releases at the same time
          latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: Upload debug build
        if: inputs.generate_release == true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          # Path to the asset
          asset_path: out/debug/build-debug-windows-amd64.zip
          asset_name: build-debug-windows-amd64.zip
          # ID of the release to attach the asset to
          asset_content_type: application/zip

      - name: Upload release build
        if: inputs.generate_release == true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          # Path to the asset
          asset_path: out/release/build-release-windows-amd64.zip
          asset_name: build-release-windows-amd64.zip
          # ID of the release to attach the asset to
          asset_content_type: application/zip

  build-linux:
    runs-on: ubuntu-latest
    needs: create-release

    steps:
      - name: Checkout Project
        uses: actions/checkout@v3.3.0

      - name: Install Clang
        uses: egor-tensin/setup-clang@v1

      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: stable

      - name: Install Code Coverage
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Setup an eBPF Development Environment in Ubuntu
        run: |
          sudo apt update
          sudo apt install linux-headers-$(uname -r) \
                  libbpfcc-dev \
                  libbpf-dev \
                  llvm \
                  clang \
                  gcc-multilib \
                  build-essential \
                  linux-tools-$(uname -r) \
                  linux-tools-common \
                  linux-tools-generic \
                  rpm \
                  musl-tools \

          sudo snap install dotnet-sdk --classic
          sudo chown -R root:root /var/lib
        
      - name: Run build-linux.sh Debug
        run: ./build-linux.sh

      - name: Upload debug build zip package
        uses: actions/upload-artifact@v3.1.2
        with:
          # Artifact name
          name: build-debug-linux-amd64.zip
          # A file, directory or wildcard pattern that describes what to upload
          path: out/x86_64-unknown-linux-musl/debug/package/

      - name: Run build-linux.sh Release
        run: ./build-linux.sh release

      - name: Upload release build zip package
        uses: actions/upload-artifact@v3.1.2
        with:
          # Artifact name
          name: build-release-linux-amd64.zip
          # A file, directory or wildcard pattern that describes what to upload
          path: out/x86_64-unknown-linux-musl/release/package/

      - name: Run Code Coverage for proxy_agent_shared
        run: |
          cargo llvm-cov --target x86_64-unknown-linux-musl --manifest-path ./proxy_agent_shared/Cargo.toml --output-path ./out/proxy_agent_shared_codeCov.txt --release
          cat ./out/proxy_agent_shared_codeCov.txt

      - name: Parse Code Coverage for proxy_agent_shared
        run: |
          threshold=70
          while IFS= read -r line || [ -n "$line" ]; do
              if [[ $line == *"TOTAL"* ]];  then
                  totalLine=$line
              fi
          done < ./out/proxy_agent_shared_codeCov.txt

          read -ra total_value_array <<< "$totalLine"
          value=${total_value_array[9]}
          totalLinesPercent=${value//%/}
          totalLinesPercent=$(echo "$totalLinesPercent" | bc -l)

          if [[ $totalLinesPercent < $threshold ]] 
          then
              echo "Code coverage below threshold: $totalLinesPercent. Failing the step."
              exit 1
          fi
          echo "Percent of Lines Covered: $totalLinesPercent"

      - name: Run Code Coverage for proxy_agent
        run: |
          cargo llvm-cov --target x86_64-unknown-linux-musl --manifest-path ./proxy_agent/Cargo.toml --output-path ./out/proxy_agent_codeCov.txt --release --ignore-filename-regex "(proxy_agent_shared|main.rs|linux.rs)" -- --test-threads=1
          cat ./out/proxy_agent_codeCov.txt

      - name: Parse Code Coverage for proxy_agent
        run: |
          threshold=70
          while IFS= read -r line || [ -n "$line" ]; do
              if [[ $line == *"TOTAL"* ]];  then
                  totalLine=$line
              fi
          done < ./out/proxy_agent_codeCov.txt

          read -ra total_value_array <<< "$totalLine"
          value=${total_value_array[9]}
          totalLinesPercent=${value//%/}
          totalLinesPercent=$(echo "$totalLinesPercent" | bc -l)

          if [[ $totalLinesPercent < $threshold ]] 
          then
              echo "Code coverage below threshold: $totalLinesPercent. Failing the step."
              exit 1
          fi
          echo "Percent of Lines Covered: $totalLinesPercent"

      - name: Run Code Coverage for proxy_agent_extension
        run: |
          cargo llvm-cov --target x86_64-unknown-linux-musl --manifest-path ./proxy_agent_extension/Cargo.toml --output-path ./out/proxy_agent_extension_codeCov.txt --release --ignore-filename-regex "(proxy_agent_shared|main.rs)" -- --test-threads=1
          cat ./out/proxy_agent_extension_codeCov.txt

      - name: Parse Code Coverage for proxy_agent_extension
        run: |
          threshold=70
          while IFS= read -r line || [ -n "$line" ]; do
              if [[ $line == *"TOTAL"* ]];  then
                  totalLine=$line
              fi
          done < ./out/proxy_agent_extension_codeCov.txt

          read -ra total_value_array <<< "$totalLine"
          value=${total_value_array[9]}
          totalLinesPercent=${value//%/}
          totalLinesPercent=$(echo "$totalLinesPercent" | bc -l)

          if [[ $totalLinesPercent < $threshold ]] 
          then
              echo "Code coverage below threshold: $totalLinesPercent. Failing the step."
              exit 1
          fi
          echo "Percent of Lines Covered: $totalLinesPercent"

      - name: get current release
        id: get_current_release
        if: inputs.generate_release == true
        uses: joutvhu/get-release@v1.0.2
        with:
          # do not push two tags/releases at the same time
          latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload debug build
        if: inputs.generate_release == true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          # Path to the asset
          asset_path: out/x86_64-unknown-linux-musl/debug/build-debug-linux-amd64.zip
          asset_name: build-debug-linux-amd64.zip
          # ID of the release to attach the asset to
          asset_content_type: application/zip

      - name: Upload release build
        if: inputs.generate_release == true
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          # Path to the asset
          asset_path: out/x86_64-unknown-linux-musl/release/build-release-linux-amd64.zip
          asset_name: build-release-linux-amd64.zip
          # ID of the release to attach the asset to
          asset_content_type: application/zip
  